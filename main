import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, CallbackContext
from telegram.ext import filters
import time

# Хранилище данных
routes = []
group_count = 3  # По умолчанию количество групп

# Команда /start
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_text(f'Привет, {user.first_name}! Нажми сюда /support, чтобы открыть мини описание.')

# Команда /menu с кнопками
async def menu(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("На 2 группы", callback_data='to_2_groups')],
        [InlineKeyboardButton("На 3 группы", callback_data='to_3_groups')],
        [InlineKeyboardButton("На 4 группы", callback_data='to_4_groups')],
        [InlineKeyboardButton("На 5 групп", callback_data='to_5_groups')],
        [InlineKeyboardButton("На 6 групп", callback_data='to_6_groups')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Выберите количество групп:', reply_markup=reply_markup)

# Команда /support с описанием
async def support(update: Update, context: CallbackContext) -> None:
    support_message = (
        "Тут описание"
    )
    await update.message.reply_text(support_message)

# Обработка кнопок
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'to_2_groups':
        groups = distribute_weights(routes, 2)
        response = format_groups(groups)
        await query.message.reply_text('Вы выбрали распределение на 2 группы:\n'+response, parse_mode='MarkdownV2')
        clear_routes()
    elif query.data == 'to_3_groups':
        groups = distribute_weights(routes, 3)
        response = format_groups(groups)
        await query.message.reply_text('Вы выбрали распределение на 3 группы:\n'+response, parse_mode='MarkdownV2')
        clear_routes()
    elif query.data == 'to_4_groups':
        groups = distribute_weights(routes, 4)
        response = format_groups(groups)
        await query.message.reply_text('Вы выбрали распределение на 4 группы:\n'+response, parse_mode='MarkdownV2')
        clear_routes()
    elif query.data == 'to_5_groups':
        groups = distribute_weights(routes, 5)
        response = format_groups(groups)
        await query.message.reply_text('Вы выбрали распределение на 5 групп:\n'+response, parse_mode='MarkdownV2')
        clear_routes()
    elif query.data == 'to_6_groups':
        groups = distribute_weights(routes, 6)
        response = format_groups(groups)
        await query.message.reply_text('Вы выбрали распределение на 6 групп:\n'+response, parse_mode='MarkdownV2')
        clear_routes()

# Распределение весов по группам (с параметром для количества групп)
def distribute_weights(route_data, num_groups):
    sorted_routes = sorted(route_data, key=lambda x: x[1], reverse=True)
    groups = [[] for _ in range(num_groups)]
    for route in sorted_routes:
        group_index = min(range(len(groups)), key=lambda i: sum(weight for _, weight in groups[i]))
        groups[group_index].append(route)
    return groups

# Обработка текстовых сообщений
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if text.isdigit():
        # Добавление маршрута
        route_number = len(routes) + 1
        weight = int(text)
        routes.append((route_number, weight))
        await update.message.reply_text(f'*М{route_number}*: _{weight}_', parse_mode='MarkdownV2')

# Распределение весов по группам
def distribute_weights(route_data, num_groups):
    # Сортируем маршруты по весу в убывающем порядке
    sorted_routes = sorted(route_data, key=lambda x: x[1], reverse=True)
    
    # Создаем пустые группы
    groups = [[] for _ in range(num_groups)]
    
    # Распределяем маршруты по группам
    for route in sorted_routes:
        route_number, weight = route
        # Находим группу с минимальной суммой весов
        group_index = min(range(len(groups)), key=lambda i: sum(weight for _, weight in groups[i]))
        groups[group_index].append(route)
    
    return groups

# Форматирование групп для вывода
def format_groups(groups):
    result = []
    for i, group in enumerate(groups):
        # Сортируем маршруты в каждой группе по порядку номеров
        sorted_group = sorted(group, key=lambda x: x[0])  # Сортировка по номеру маршрута (route_number)
        group_details = "\n ".join(f"*М{route_number}*: _{weight}_" for route_number, weight in sorted_group)
        group_sum = sum(weight for _, weight in sorted_group)
        result.append(f"Группа {i + 1}:\n {group_details}\n Сумма: ||{group_sum}||")
    return "\n".join(result)

def clear_routes():
    global routes
    routes = []

def run_bot(token):
    while True:
        try:
            application = Application.builder().token(token).build()
            application.add_handler(CommandHandler('start', start))
            application.add_handler(CommandHandler('menu', menu))
            application.add_handler(CommandHandler('support', support))
            application.add_handler(CallbackQueryHandler(button))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            application.run_polling()
            break
        except Exception as e:
            print(f"Ошибка: {e}. Повторная попытка через 10 секунд...")
            time.sleep(10)

def main():
    token = ''  # Замените на ваш токен
    run_bot(token)

if __name__ == '__main__':
    main()
